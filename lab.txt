// week 8
Q1)
function autmorphic(number) {
  let square = number ** 2;
  let string_square = square + "";
  let string_number = number + "";
  if (string_number === string_square.slice(-string_number.length)) {
    return true;
  } else {
    return false;
  }
}

console.log("25 is automorphic: " + autmorphic(25));
console.log("3 is automorphic" + autmorphic(3));

Q2) //Q2.js
let stack = require("./stack");
let queue = require("./queue");

let Stack = new stack();
let Queue = new queue();

console.log("Stack");
Stack.push(1);
Stack.push(2);
console.log("Current Stack");
Stack.print();
console.log("Top");
console.log(Stack.return_top());
console.log("Pop");
console.log(Stack.pop());
Stack.clear();
console.log("Clear");
Stack.print();

console.log("Queue");
Queue.enqueue(1);
Queue.enqueue(2);
Queue.enqueue(3);
console.log("Current Queue");
Queue.print();
console.log("Dequeue");
console.log(Queue.dequeue());
console.log("Clear");
Queue.clear();
Queue.print();

//stack.js
function Stack() {
  this.stack = [];
}

Stack.prototype.push = function(element) {
  this.stack.push(element);
};

Stack.prototype.pop = function() {
  let element = this.stack.pop();
  return element;
};

Stack.prototype.print = function() {
  if (!this.stack.length) {
    console.log("Empty");
    return;
  }
  let s = [].concat(this.stack);
  s.reverse();
  s.forEach(function println(item) {
    console.log(item);
  });
};

Stack.prototype.return_top = function() {
  return this.stack[this.stack.length - 1];
};

Stack.prototype.clear = function() {
  this.stack = [];
};

module.exports = Stack;

// Queue.js

function Queue() {
  this.queue = [];
}

Queue.prototype.enqueue = function(element) {
  this.queue.push(element);
};

Queue.prototype.dequeue = function() {
  let element = this.queue.shift();
  return element;
};

Queue.prototype.clear = function() {
  this.queue = [];
};

Queue.prototype.print = function() {
  if (!this.queue.length) {
    console.log("Queue is Empty");
    return;
  }
  let result = "";
  this.queue.forEach(function println(item) {
    result += item + " ";
  });
  console.log(result);
};

module.exports = Queue;

Q3) //Q3.js

let area = require("./area");

let side = 5;
let length = 6;
let height = 7;
let radius = 8;
console.log(`Area of square with side ${side} = ${area.square(side)}`);
console.log(
  `Area of rectangle with sides ${length} and ${height} = ${area.rectangle(
    length,
    height
  )}`
);
console.log(`Area of circle with radius ${radius} = ${area.circle(radius)}`);

//area.js

function square(side) {
  return side * side;
}

function rectangle(length, width) {
  return length * width;
}

function circle(radius) {
  return Math.PI * radius * radius;
}

module.exports = {
  square: square,
  rectangle: rectangle,
  circle: circle
};

//week 9

Q1)
// Q1 a.js
var express = require("express");
var app = express();

app.get("/", function(req, res) {
  res.sendFile(__dirname + "/" + "index.html");
});

app.get("/getData", function(req, res) {
  res.end("Name:" + req.query.uname + " Age: " + req.query.age);
});

app.listen(5000);

//Q1 b.js

var express = require("express");
var bodyParser = require("body-parser");
var app = express();

app.use(bodyParser.urlencoded({ extended: false }));
app.use(bodyParser.json());

app.get("/", function(req, res) {
  res.sendFile(__dirname + "/" + "indexpost.html");
});

app.post("/getData", function(req, res) {
  res.end("Name: " + req.body.uname + " Age: " + req.body.age);
});

app.listen(5000);

//indexget.html

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta http-equiv="X-UA-Compatible" content="ie=edge" />
    <title>Express Q1</title>
  </head>
  <body>
    <form id="form" name="form" method="get" action="getData">
      Please Fill up the form and submit
      <label>Name: <input type="text" name="uname" placeholder="name"/></label>
      <label
        >Age: <input type="number" name="age" placeholder="0" min="0"
      /></label>
      <input type="submit" value="send" />
    </form>
  </body>
</html>

//indexpost.html

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta http-equiv="X-UA-Compatible" content="ie=edge" />
    <title>Express Q1</title>
  </head>
  <body>
    <form id="form" name="form" method="post" action="getData">
      Please Fill up the form and submit
      <label>Name: <input type="text" name="uname" placeholder="name"/></label>
      <label
        >Age:
        <input
          type="number"
          name="age"
          placeholder="0"
          min="0"
          max="150"
          value="0"
      /></label>
      <input type="submit" value="send" />
    </form>
  </body>
</html>

Q3)
//Q3.js

var express = require("express");
var app = express();

var cur_date = function(req, res, next) {
  var time = new Date(Date.now());
  var time = time.toUTCString();
  var d = new Date(time);
  var offset = (new Date().getTimezoneOffset() / 60) * -1;
  var n = new Date(d.getTime() + offset);
  req.date = n;
  next();
};
app.use(cur_date);

var logger = function(req, res, next) {
  req.cur_url = req.protocol + "://" + req.get("host") + req.originalUrl;
  next();
};
app.use(logger);

app.get("/", function(req, res) {
  var text = "Time: " + req.date + " URL: " + req.cur_url;
  res.end(text);
});

app.listen(5000);

Q4)

//Q4.js

var express = require("express");
var app = express();
var count = 0;
var myLogger = function(req, res, next) {
  req.count = count++;
  console.log("LOGGED");
  next();
};
app.use(myLogger);

var visited = function(req, res, next) {
  console.log("No. of the time visited: " + req.count);
  next();
};
app.use(visited);

app.get("/", function(req, res) {
  res.send("Welcome user");
});

app.listen(5000);


//Week 10
Q1)
//Q1.js

var express = require("express");
var app = express();
var bodyParser = require("body-parser");
var expressValidator = require("express-validator");

var urlencodedParser = bodyParser.urlencoded({ extended: false });

app.use(express.static("public"));
app.use(expressValidator());

app.get("/index.html", function(req, res) {
  res.sendFile(__dirname + "/" + "index.html");
});

app.get("/getData", function(req, res) {
  res.send(
    "<b>Name: " +
      req.query.name +
      '</b><br><p style="text-decoration: underline">Branch: ' +
      req.query.branch +
      "</p><br>"
  );
});

app.listen(5000);

//index.html

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta http-equiv="X-UA-Compatible" content="ie=edge" />
    <title>Express</title>
  </head>
  <body>
    <form id="form" name="form" method="post" action="getData">
      Please Fill up the form and submit
      <label>Name: <input type="text" name="name" placeholder="name"/></label>
      <label>USN: <input type="text" name="usn" placeholder="usn"/></label>
      <label
        >Branch: <input type="text" name="branch" placeholder="branch"
      /></label>
      <label
        >Marks: <input type="text" name="marks" placeholder="marks"
      /></label>
      <input type="submit" value="send" />
    </form>
  </body>
</html>

Q2)
//Q2.js

var express = require("express");
var app = express();

app.get("/", function(req, res) {
  res.sendFile(__dirname + "/" + "entry.html");
});

app.get("/rit", function(req, res) {
  res.sendFile(__dirname + "/" + "c1.html");
});

app.get("/pes", function(req, res) {
  res.sendFile(__dirname + "/" + "c2.html");
});

app.get("/bms", function(req, res) {
  res.sendFile(__dirname + "/" + "c3.html");
});

app.get("/rvce", function(req, res) {
  res.sendFile(__dirname + "/" + "c4.html");
});

app.get("/bit", function(req, res) {
  res.sendFile(__dirname + "/" + "c5.html");
});

app.listen(5000);

//entry.html

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta http-equiv="X-UA-Compatible" content="ie=edge">
  <title>Document</title>
</head>
<body>
  <p>List</p>
  <ul>
    <li><a href="rit">RIT</a></li>
    <li><a href="pes">PES</a></li>
    <li><a href="bms">BMS</a></li>
    <li><a href="rvce">RVCE</a></li>
    <li><a href="bit">BIT</a></li>
  </ul>
</body>
</html>

//c1.html

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta http-equiv="X-UA-Compatible" content="ie=edge">
  <title>Express Q1</title>
</head>
<body>
  <h1>RIT</h1>
  <h5>Courses</h5>
  <ul>
    <li>CSE</li>
    <li>ISE</li>
    <li>ECE</li>
    <li>EEE</li>
    <li>ME</li>
  </ul>
</body>
</html>

//c2.html

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta http-equiv="X-UA-Compatible" content="ie=edge">
  <title>Express Q1</title>
</head>
<body>
  <h1>PES</h1>
  <h5>Courses</h5>
  <ul>
    <li>CSE</li>
    <li>ISE</li>
    <li>ECE</li>
    <li>EEE</li>
    <li>ME</li>
  </ul>
</body>
</html>

//c3.html

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta http-equiv="X-UA-Compatible" content="ie=edge">
  <title>Express Q1</title>
</head>
<body>
  <h1>BMS</h1>
  <h5>Courses</h5>
  <ul>
    <li>CSE</li>
    <li>ISE</li>
    <li>ECE</li>
    <li>EEE</li>
    <li>ME</li>
  </ul>
</body>
</html>

//c4.html

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta http-equiv="X-UA-Compatible" content="ie=edge">
  <title>Express Q1</title>
</head>
<body>
  <h1>RVCE</h1>
  <h5>Courses</h5>
  <ul>
    <li>CSE</li>
    <li>ISE</li>
    <li>ECE</li>
    <li>EEE</li>
    <li>ME</li>
  </ul>
</body>
</html>

//c5.html

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta http-equiv="X-UA-Compatible" content="ie=edge">
  <title>Express Q1</title>
</head>
<body>
  <h1>BIT</h1>
  <h5>Courses</h5>
  <ul>
    <li>CSE</li>
    <li>ISE</li>
    <li>ECE</li>
    <li>EEE</li>
    <li>ME</li>
  </ul>
</body>
</html>

Q3)
//Q3.js
var express = require("express");
var app = express();
var bodyParser = require("body-parser");
var expressValidator = require("express-validator");
var urlencodedParser = bodyParser.urlencoded({ extended: false });

app.use(express.static("public"));
app.use(bodyParser.json());
app.use(expressValidator());

app.get("/index.html", function(req, res) {
  res.sendFile(__dirname + "/" + "index.html");
});

app.get("/getData", function(req, res) {
  req.checkBody({
    marks: {
      optional: true,
      isNumeric: {
        errorMessage: "Marks must be a number"
      }
    }
  });
  req.checkBody("name", "Name should not be empty").isEmpty();

  var errors = req.validationErrors();
  console.log(req.query);
  console.log(errors);
  if (errors) {
    res.send("Name required");
  } else {
    res.send(
      "<b>Name: " +
        req.query.name +
        '</b><br><p style="text-decoration: underline">Branch: ' +
        req.query.branch +
        "</p><br>" +
        "<p> Marks: " +
        req.query.marks +
        "</p>"
    );
  }
});

app.listen(5000);

//index.html

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta http-equiv="X-UA-Compatible" content="ie=edge" />
    <title>Express</title>
  </head>
  <body>
    <form id="form" name="form" method="post" action="getData">
      Please Fill up the form and submit
      <label>Name: <input type="text" name="name" placeholder="name"/></label>
      <label>USN: <input type="text" name="usn" placeholder="usn"/></label>
      <label
        >Branch: <input type="text" name="branch" placeholder="branch"
      /></label>
      <label
        >Marks: <input type="text" name="marks" placeholder="marks"
      /></label>
      <input type="submit" value="send" />
    </form>
  </body>
</html>


Week 11
Q1)
//Q1.js

var express = require("express");
var mongoClient = require("mongodb").MongoClient;
var bodyParser = require("body-parser");
var app = express();

app.use(bodyParser.urlencoded({ extended: false }));
app.use(bodyParser.json());
app.use(express.static("public"));

app.get("/", function(req, res) {
  res.sendFile(__dirname + "/index.html");
});
app.get("/showData", function(req, res) {
  mongoClient.connect("mongodb://127.0.0.1/sidharth", function(err, db) {
    if (err) {
      console.log(err);
      db.close();
      res.send("error");
    } else {
      db.collection("data")
        .find({})
        .toArray(function(err, result) {
          if (err) throw err;
          console.log(result);
          result.forEach(function(obj) {
            res.write("<p>" + obj.name + "</p>");
          });
          res.end();
          db.close();
        });
    }
  });
});

app.post("/addData", function(req, res) {
  var data = req.body;
  console.log(data);
  mongoClient.connect("mongodb://127.0.0.1/sidharth", function(err, db) {
    if (err) {
      console.log(err);
      db.close();
      res.send("error");
    } else {
      db.collection("data").insert(data, function(err, docs) {
        let obj = req.body;
        res.write("<p>USN:" + obj.usn + "</p>");
        res.write("<p>NAME:" + obj.name + "</p>");
        res.write("<p>SEX:" + obj.sex + "</p>");
        res.write("<p>SEM:" + obj.sem + "</p>");
        res.write("<p>COLLEGE:" + obj.college + "</p>");
        res.write("<p>ADHAAR CARD:" + obj.acard + "</p>");
        res.write("<p>PASSPORT:" + obj.pnum + "</p>");
        res.write("<p>ACCOUNT NUMBER:" + obj.accno + "</p>");
        res.end();
        db.close();
      });
    }
  });
});

var serve = app.listen(3000, function() {
  console.log(3000);
});

//index.html
<!DOCTYPE html>
<html lang="en" dir="ltr">
  <head>
    <meta charset="utf-8" />
    <title>some form</title>
  </head>
  <body>
    <form action="/addData" method="post">
      USN:<input type="text" name="usn" /><br />
      NAME:<input type="text" name="name" /><br />
      SEX:<input type="text" name="sex" /><br />
      SEMESTER:<input type="text" name="sem" /><br />
      BRANCH:<input type="text" name="branch" /><br />
      COLLEGE:<input type="text" name="college" /><br />
      ADHAAR CARD:<input type="text" name="acard" /><br />
      PASSPORT NUMBER:<input type="text" name="pnum" /><br />
      BANK ACCOUNT NUMBER:<input type="text" name="accno" /><br />
      <input type="submit" value="subit" />
    </form>
  </body>
</html>

Q2)
//use above index.html
//Q2.js

var express = require("express");
var app = express();
var bodyParser = require("body-parser");
var expressValidator = require("express-validator");

app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: false }));
app.use(express.static("public"));
app.use(expressValidator());

app.get("/", function(req, res) {
  res.sendfile(__dirname + "index.html");
});

app.post("/addData", function(req, res) {
  var patt = /1MS1[5-9]CS[0-1][0-9][0-9]/;

  req.checkBody("usn", "field empty").notEmpty();
  req.checkBody("sex", "field empty").notEmpty();
  req.checkBody("sem", "field empty").notEmpty();
  req.checkBody("branch", "field empty").notEmpty();
  req.checkBody("college", "field empty").notEmpty();
  req.checkBody("acard", "field empty").notEmpty();
  req.checkBody("pnum", "field empty").notEmpty();
  req
    .assert("name", "invalid value")
    .notEmpty()
    .isAlpha();
  req.checkBody("accno", "field empty").notEmpty();
  req.assert("usn", "not proper format").matches(patt);
  var errors = req.validationErrors();
  console.log(errors);
  if (errors) {
    res.status(400).json(errors);
  } else {
    res.status(200).json({ message: "done" });
  }
});

app.listen(3000, function() {
  console.log(3000);
});

Q3)
//Q3.js

var express = require("express");
var mongoose = require("mongoose");
var bodyParser = require("body-parser");
var app = express();

var schema = new mongoose.Schema(
  {
    empid: "string",
    empname: "string",
    department: "string",
    designation: "string",
    phone: "string",
    email: "string"
  },
  {
    strict: false,
    collection: "emp1"
  }
);
var Emp = mongoose.model("emps", schema);

app.use(express.static("public"));
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: false }));
app.get("/", function(req, res) {
  res.sendFile(__dirname + "/public/index2.html");
});

app.post("/addData", function(req, res) {
  var data = req.body;
  mongoose.connect(
    "mongodb://127.0.0.1/sidharth",
    { useNewUrlParser: true },
    function(err, db) {
      if (err) {
        res.status(400).send("some db error");
      } else {
        var addition = new Emp(data);
        addition.save(function(err) {
          if (err) {
            console.log(err);
            db.close();
          } else {
            db.close();
            res.status(200).send("added sucessfully");
          }
        });
      }
    }
  );
});
app.get("/viewAll", function(req, res) {
  mongoose.connect(
    "mongodb://127.0.0.1/sidharth",
    { useNewUrlParser: true },
    function(err, db) {
      if (err) {
        res.status(400).send("some db error");
      } else {
        Emp.find({}).exec(function(err, obj) {
          obj.forEach(obj => {
            if (obj["empid"]) {
              res.write(
                "<p>EMPID:" +
                  obj["empid"] +
                  "</p><p>NAME:" +
                  obj["empname"] +
                  "</p><p>DEPARTMENt:" +
                  obj["department"] +
                  "</p><p>DESIGNATION:" +
                  obj["designation"] +
                  "</p><p>Phone:" +
                  obj["phone"] +
                  "</p><p>EMAIL:" +
                  obj["email"] +
                  "</p>"
              );
            }
          });
          res.end();
        });
      }
    }
  );
});

app.get("/sort", function(req, res) {
  mongoose.connect(
    "mongodb://127.0.0.1/sidharth",
    { useNewUrlParser: true },
    function(err, db) {
      if (err) {
        res.status(400).send("some db error");
      } else {
        Emp.aggregate(
          [
            {
              $group: {
                _id: "$empid",
                recommendCount: { $sum: 1 }
              }
            },
            { $sort: { _id: -1 } }
          ],
          function(err, result) {
            if (!err) {
              result.forEach(obj1 => {
                Emp.find({ empid: obj1._id }).exec(function(err, obj) {
                  res.write(
                    "<p>EMPID:" +
                      obj["empid"] +
                      "</p><p>NAME:" +
                      obj["empname"] +
                      "</p><p>DEPARTMENt:" +
                      obj["department"] +
                      "</p><p>DESIGNATION:" +
                      obj["designation"] +
                      "</p><p>Phone:" +
                      obj["phone"] +
                      "</p><p>EMAIL:" +
                      obj["email"] +
                      "</p>"
                  );
                });
              });
            } else {
              console.log(err);
            }
          }
        );
      }
    }
  );
});

app.listen(3000, function() {
  console.log(3000);
});

//index2.html

<html lang="en" dir="ltr">
  <head>
    <meta charset="utf-8" />
    <title>some form</title>
  </head>
  <body>
    <form action="/addData" method="post">
      EMPID:<input type="text" name="empid" /><br />
      EMPNAME:<input type="text" name="empname" /><br />
      DEPARTMENT:<input type="text" name="department" /><br />
      DESIGNATION:<input type="text" name="designation" /><br />
      MOBILE NUMBER:<input type="text" name="phone" /><br />
      Email ID:<input type="text" name="email" /><br />
      <input type="submit" value="subit" />
    </form>
    <a href="/viewAll">show all</a>
    <a href="/sort">sort</a>
  </body>
</html>

Q4)

var express = require("express");
var app = express();
var path = require("path");
var bodyParser = require("body-parser");
var expressValidator = require("express-validator");
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: false }));
app.use(express.static("public2"));
app.use(expressValidator());
app.get("/", function(req, res) {
  res.sendfile(path.join(__dirname, "/public2/index2.html"));
});

app.post("/addData", function(req, res) {
  var patt = /[0-9]+/;

  req.checkBody("empid", "field empty").notEmpty();
  req.checkBody("department", "field empty").notEmpty();
  req.checkBody("designation", "field empty").notEmpty();
  req.checkBody("phone", "field empty").notEmpty();
  req.checkBody("email", "field empty").notEmpty();
  req.assert("empid", "not proper format").matches(patt);
  var errors = req.validationErrors();
  console.log(errors);
  if (errors) {
    res.status(400).json(errors);
  } else {
    res.status(200).json({ message: "done" });
  }
});

app.listen(3000, function() {
  console.log(3000);
});
